Federacja planet
================

W odległej galaktyce o numerze M1N1 funkcjonuje federacja planet. 

Po przyjęciu do federacji kolejnej planety Samodzielny Trzygłowy Lider
federacji planet uznał, że zarządzanie Federacją wymaga wspomagania
komputerowego. W związku z tym zwrócił się do studentów z planety
Ziemia o pomoc w napisaniu odpowiedniego programu.

Należy napisać program, z wykorzystaniem C++ i biblioteki STL, który
będzie realizował wymienione niżej zadania. 
Uwaga! W tym zadaniu zabronione jest używanie jakichkolwiek jawnych
pętli. Używamy tylko algorytmów i operacji dostarczonych w bibliotece
STL (nagłówki <algorithm> i <numeric>.

W trakcie implementacji metod określić, czy zmieniają one stan
obiektu, czy nie i odpowiednio oznaczyć jako const.

W zarządzaniu Federacją występują następujące byty:
 - Planety
 - Członkowie senatów planet

Każda planeta składa się z:
 - nazwy
 - zbioru członków senatu (musi zostać zaimplementowany z użyciem
 set z STL). Zbiór członków powinien być uporządkowany według
 malejących sił wpływów, a jeśli te są równe, według imion.

Każdy członek senatu ma trzy cechy: 
 - imię (string)
 - siłę wpływów (int)
 - nazwę planety z której pochodzi (string)
Można założyć, że imię członka jest unikatowe.

1. (2 punkty)  
   - Napisać niezbędne konstruktory, operatory i destruktory dla planet
     i członków senatu (Uwaga: tylko niezbędne, jeśli w danym przypadku
     wystarczy wersja domyślna, nie implementujemy własnej)
  - Napisać metodę dodajSenatora dla klasy Planeta
  - Napisać metody dla klasy Planeta:
     + void wypiszSile(ostream& out),
     + void wypiszPochodzenie(ostream& out),
   które dla każdego członka senatu planety wypiszą na podany strumień wyjściowy odpowiednio pary 
     + imię członka senatu, siła wpływów
     + imię członka senatu, nazwa planety z której pochodzi

Podpowiedzi: ostream_iterator, transform, to_string

2. (1 punkt)
   Napisać następujące metody dla klasy planeta:
    int usunSlabych(int sila), 
   która usunie ze zbioru członków o sile mniejszej niż podana jako
   argument.
Podpowiedzi: find_if

3. (1 punkt)
  Utworzyć wektor wskaźników na planety i dodać do niego wskaźniki na 
  wszystkie planety zdefiniowane w funkcji main. 
  Posortować planety w porządku leksykograficznym sił
  wpływów członków senatu planety (cały czas obowiązuje wcześniej
  ustalona kolejność)
Podpowiedzi: lexicographical_compare, sort

4. (1 punkt)
 Napisać metodę 
  int sumaSil(), 
 która zwróci sumaryczną siłę wpływów wszystkich członków senatu
 planety.
Podpowiedzi: accumulate

